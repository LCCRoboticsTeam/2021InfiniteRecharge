package frc.robot;

import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton1;
    public XboxController mecstick;
    public JoystickButton launchPadBtn1;
    public Joystick launchpad;

    private double leftDeadzone;
    
    private double leftXAxis;
    private double leftXValue;
    
    private double leftYAxis;
    private double leftYValue;
    
    private double rightDeadzone;
    
    private double rightXAxis;
    private double rightXValue;
    
    boolean yButton;
    
    public static final int kSafety = 4;        //LPSafety = launchpad.getRawButton(4);
    public static final int kBlueButton = 5;
    public static final int kBallIn = 10;
    public static final int kBallOut = 11;
    public static final int kArmUp = 9;
    public static final int kArmDown = 8;
    public static final int kClimbUp = 7;
    public static final int kClimbDown = 6;
    
    // int LPSafetyID;
    // int LPCargoGateID;
    // int LPArmDownID;
    // int LPArmUpID; 
	// int LPHandExtID;
	// int LPHandRtcID;
	// int LPHandOpenID;
    // int LPHandCloseID;
    
	double LPDial;
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    	mecstick = new XboxController(0);
        launchpad = new Joystick(1);
		
        leftDeadzone = .1;
		rightDeadzone = .2;

		/* Not needed here, must pull values in functions below
		LPSafety = launchpad.getRawButton(4);
		LPCargoGate = launchpad.getRawButton(5);
		LPArmDown = launchpad.getRawButton(6);
		LPArmUp = launchpad.getRawButton(7);
		LPHandExt = launchpad.getRawButton(8);
		LPHandRtc = launchpad.getRawButton(9);
		LPHandOpen = launchpad.getRawButton(10);
		LPHandClose = launchpad.getRawButton(11);
		LPDial = launchpad.getRawAxis(6);
		*/
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getXboxJoystick() {
        return mecstick;
    }
    
    public Joystick getLaunchPad() {
        return launchpad;
    }

    public boolean getYButton() {	
    	return mecstick.getYButton();
    }
    
    public boolean getBButton() {	
    	return mecstick.getBButton();
    }

    public boolean getAButton() {
        return mecstick.getAButton();
    }
    
    public boolean getXButton() {
        return mecstick.getXButton();        
    }

    //Previously getX()
    public double getX() {
    	
		leftXAxis = -mecstick.getX(GenericHID.Hand.kLeft)*-1.0;
		
		if (Math.abs(leftXAxis) < leftDeadzone) {			
			leftXValue = 0;
		} else if (leftXAxis < 0) {		
			leftXValue = leftXAxis + leftDeadzone;
		} else if (leftXAxis > 0) {		
			leftXValue = leftXAxis - leftDeadzone;
		} else {		
			leftXValue = 0;	
		}
		
		return leftXValue;
		
    }
    
    //Previously getY()
    public double getRotate() {
    	
    	leftYAxis = mecstick.getY(GenericHID.Hand.kLeft)*-1.0;
		
		if (Math.abs(leftYAxis) < leftDeadzone) {
			
			leftYValue = 0;
			
		} else if (leftYAxis < 0) {
			
			leftYValue = leftYAxis + leftDeadzone;
			
		} else if (leftYAxis > 0) {
			
			leftYValue = leftYAxis - leftDeadzone;
			
		} else {
			
			leftYValue = 0;
			
		}
		
		return leftYValue;
		
    }
    
    //previously getRotate()
    public double getY() {
    	
    	rightXAxis = mecstick.getX(GenericHID.Hand.kRight);
		
		if (Math.abs(rightXAxis) < rightDeadzone) {
			
			rightXValue = 0;
			
		} else if (rightXAxis < 0) {
			
			rightXValue = rightXAxis + rightDeadzone;
			
		} else if (rightXAxis > 0) {
			
			rightXValue = rightXAxis - rightDeadzone;
			
		} else {
			
			rightXValue = 0;
			
		}
		
		return rightXValue;

    }
   
    public double getRTrigger() {
    	
    	return mecstick.getTriggerAxis(GenericHID.Hand.kRight);
		
    }

    public boolean getSafety() {
    	return launchpad.getRawButton(kSafety);	
    }

    public boolean getBlueButton() {
    	return launchpad.getRawButton(kBlueButton);	
    }
    
    public boolean getBallIn() {
    	return launchpad.getRawButton(kBallIn);
    }

    public boolean getBallOut() {
    	return launchpad.getRawButton(kBallOut);
    }

    public boolean getArmUp() {
    	return launchpad.getRawButton(kArmUp);
    }    
    
    public boolean getArmDown() {
    	return launchpad.getRawButton(kArmDown);
    }
    
    public boolean getClimbUp() {
    	return launchpad.getRawButton(kClimbUp);
    }
    
    public boolean getClimbDown() {
    	return launchpad.getRawButton(kClimbDown);
    }
    
    /* COMMENTED OUT RIGHT NOW AFTER VS CODE MIGRATION */
    public double getSpeed() {
    	// This produces values of 0.44 -> 0.5
    	//LPDial = (1 - ((launchpad.getRawAxis(6) + 1.0) / 2.0));
    	
    	// test purposes only - values are 0 -> 0.11811
    	LPDial = (launchpad.getRawAxis(6)+1)/2;
    	
    	return LPDial;
        //return 0;
        
    }
}

